package org.iets3.ears.gxw.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.io.File;
import org.fortiss.de.autocode4.gxw.sdf.SDFctrl;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.ArrayList;
import org.fortiss.de.autocode4.gxw.GXWEngine;
import org.fortiss.de.autocode4.gxw.spec.GXWspec;
import org.fortiss.de.autocode4.gxw.engine.ConstraintBuilder;
import java.io.PrintWriter;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import org.fortiss.de.autocode4.gxw.twoqbf.TwoQBF;
import org.fortiss.de.autocode4.gxw.engine.UnknownVariableAssignment;
import javax.swing.JOptionPane;
import org.fortiss.de.autocode4.gxw.codegen.LustreCodeGenerator;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.fortiss.de.autocode4.gxw.sdf.Actor;
import org.fortiss.de.autocode4.gxw.sdf.EventActor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.fortiss.de.autocode4.gxw.sdf.LogicGateActor;
import org.fortiss.de.autocode4.gxw.sdf.HighLevelCtrlActor;
import org.fortiss.de.autocode4.gxw.sdf.ResActor;
import org.fortiss.de.autocode4.gxw.sdf.Wire;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import org.apache.commons.lang3.StringUtils;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class RequirementChunk__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, "org.iets3.ears.gxw.structure.RequirementChunk");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Void> writeToFile_id3ghj88fUYVW = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("writeToFile").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3ghj88fUYVW").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<String> systhesizeSolverOutput_id3ghj88fVJYt = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("systhesizeSolverOutput").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3ghj88fVJYt").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(File.class, ""));
  public static final SMethod<Void> generateModelForMPS_id1TTP9gdhydO = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("generateModelForMPS").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1TTP9gdhydO").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(SDFctrl.class, ""));
  public static final SMethod<Void> ConvertReqToFormulae_id4MKUcPlT3vX = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("ConvertReqToFormulae").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4MKUcPlT3vX").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<String> GetSolverOutputString_id4MKUcPmjdeS = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("GetSolverOutputString").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4MKUcPmjdeS").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(File.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(writeToFile_id3ghj88fUYVW, systhesizeSolverOutput_id3ghj88fVJYt, generateModelForMPS_id1TTP9gdhydO, ConvertReqToFormulae_id4MKUcPlT3vX, GetSolverOutputString_id4MKUcPmjdeS);

  private static void ___init___(@NotNull SNode __thisNode__) {

  }

  protected static Logger LOG = LogManager.getLogger(RequirementChunk__BehaviorDescriptor.class);
  /*package*/ static void writeToFile_id3ghj88fUYVW(@NotNull SNode __thisNode__, String filePath, String content) {
    File file = new File(filePath);

    try {
      if (file.exists()) {
        file.delete();
      }
      FileWriter fileWriter = new FileWriter(file.getAbsoluteFile());
      BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

      bufferedWriter.write(content);
      bufferedWriter.close();


    } catch (IOException ex) {
      if (LOG.isInfoEnabled()) {
        LOG.info("", ex);
      }
    }


  }
  /*package*/ static String systhesizeSolverOutput_id3ghj88fVJYt(@NotNull SNode __thisNode__, File file) {
    ArrayList<String> variableList = new ArrayList<String>();


    try {

      GXWEngine engine = new GXWEngine(false);

      GXWspec problem = new GXWspec(file);

      ConstraintBuilder builder = new ConstraintBuilder(problem);

      PrintWriter writer;
      writer = new PrintWriter("tmp.qdimacs", "UTF-8");

      if (LOG.isInfoEnabled()) {
        LOG.info("before");
      }

      builder.produceConstraint();

      writer.write(builder.qbfCstr.constraint.toString());
      writer.close();

      variableList = builder.qbfCstr.cnfVarList;
      engine.resolutionBlockPin = builder.resolutionBlockPin;

      if (LOG.isInfoEnabled()) {
        LOG.info("Use native Java 2QBF solver");
      }

      // defining variables 

      ByteArrayOutputStream baOutputStream = new ByteArrayOutputStream();
      PrintStream printStream = new PrintStream(baOutputStream);
      PrintStream old = System.out;
      System.setOut(printStream);

      TwoQBF solver = new TwoQBF();
      String[] argsnew = new String[1];
      argsnew[0] = "tmp.qdimacs";
      solver.run(argsnew);

      System.out.flush();
      System.setOut(old);

      UnknownVariableAssignment unknownVA = new UnknownVariableAssignment();

      String result = baOutputStream.toString();
      if (LOG.isInfoEnabled()) {
        LOG.info("the result string has " + result);
      }
      if (result.contains("UNSAT")) {

        if (problem.realizable == GXWspec.NO_SOLUTION_2QBF) {
          if (LOG.isInfoEnabled()) {
            LOG.info("Inconsistent result between synthesis and spec (the spec should be not realizable): " + file.getName());
          }
          JOptionPane.showMessageDialog(null, "Inconsistent result between synthesis and spec (the spec should be not realizable): " + file.getName());

          return "Inconsistent result between synthesis and spec (the spec should be not realizable): " + file.getName();

        }

        if (LOG.isInfoEnabled()) {
          LOG.info("Parameter assignment for resolution blocks found! ");
        }
        String[] res = result.split("[\\r\\n]+");
        for (String r : res) {
          if (r.trim().startsWith("UNSAT for the following universal variable assignment:")) {
            String assignments = r.trim().substring("UNSAT for the following universal variable assignment:".length()).trim();
            if (LOG.isInfoEnabled()) {
              LOG.info(" assignments!" + assignments);
            }
            if (!(assignments.trim().equals(""))) {
              String[] assigns = assignments.split(",");
              for (String assign : assigns) {
                boolean isSetToFalse = false;
                if (assign.trim().startsWith("-")) {
                  isSetToFalse = true;
                  assign = assign.trim().substring(1);
                }

                String varName = variableList.get(Integer.parseInt(assign)).substring("Res".length(), variableList.get(Integer.parseInt(assign)).indexOf("."));

                if (isSetToFalse) {
                  unknownVA.variableAssignment.put(varName, "false");
                } else {
                  unknownVA.variableAssignment.put(varName, "true");
                }
              }
            }
            break;
          }
        }




      } else {
        if (problem.realizable == GXWspec.REALIZABLE) {
          if (LOG.isInfoEnabled()) {
            LOG.info(" ERROR: Inconsistent result between synthesis and spec (the spec should be realizable): " + file.getName());
          }
          JOptionPane.showMessageDialog(null, " ERROR: Inconsistent result between synthesis and spec (the spec should be realizable): " + file.getName());

          return " ERROR: Inconsistent result between synthesis and spec (the spec should be realizable): " + file.getName();


        }

        if (LOG.isInfoEnabled()) {
          LOG.info("Parameter assignment for resolution blocks unavailable ");
        }
        JOptionPane.showMessageDialog(null, "Error: Parameter assignment for resolution blocks unavailable (the spec is not realizable)");

        return " ";
      }




      LustreCodeGenerator pcGen = new LustreCodeGenerator(problem);
      // generate models 
      if (LOG.isInfoEnabled()) {
        LOG.info("now reading the files");
      }
      pcGen.generateModelDescription(builder.ctrlBuilder.sdfCtrl);
      if (LOG.isInfoEnabled()) {
        LOG.info("now sending the sdf to generate model");
      }
      RequirementChunk__BehaviorDescriptor.generateModelForMPS_id1TTP9gdhydO.invoke(__thisNode__, builder.ctrlBuilder.sdfCtrl);
      return " ";


    } catch (Exception ex) {
      if (LOG.isInfoEnabled()) {
        LOG.info("the exception is ..", ex);
      }

      return "sorry it does not work ";
    }

  }
  /*package*/ static void generateModelForMPS_id1TTP9gdhydO(@NotNull SNode __thisNode__, SDFctrl controller) {


    // Initialize  and arraylist with bool values for all types of actors 
    HashMap<String, Boolean> typeMemorizer = new HashMap<String, Boolean>();

    typeMemorizer.put("And", false);
    typeMemorizer.put("TernaryNot", false);
    typeMemorizer.put("Or", false);
    typeMemorizer.put("IfTB", false);
    typeMemorizer.put("TrUB", false);
    typeMemorizer.put("Iff", false);

    // now generating parameters for the new language 
    SNode modelHolder = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, "org.iets3.graphicalLustre.structure.ModelHolder"));
    SPropertyOperations.set(modelHolder, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "Controller Holder");

    SNode gateDescriptors = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d1eL, "org.iets3.graphicalLustre.structure.GateDescriptors"));
    SPropertyOperations.set(gateDescriptors, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "Gate Descriptors");

    for (Actor actor : controller.getActors()) {

      if (actor instanceof EventActor) {

        if (((EventActor) actor).getStructure() == EventActor.EventType.Complex) {

          SNode genericEventActor = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x7459d2b66d70ddfcL, "org.iets3.graphicalLustre.structure.GenericEventActor"));
          SPropertyOperations.set(genericEventActor, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());

          ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors"))).addElement(genericEventActor);

          SNode gateDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, "org.iets3.graphicalLustre.structure.GateDefinition"));
          SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
          try {
            SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, 0x5f4fbd258ee84d22L, "definition"), LustreCodeGenerator.produceGenericEventActorCodeForMPS(((EventActor) actor)));

          } catch (Exception ex) {
            System.out.println("exception at .. event actor complex");
          }

          // link with the pointer 

          SLinkOperations.setTarget(genericEventActor, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45cL, 0x87370915ed531d6L, "gateDefinition"), gateDefinition);
          SLinkOperations.getChildren(gateDescriptors, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d1eL, 0x5f4fbd258ee84d1fL, "gateDefinitions")).add(gateDefinition);


        }

      } else if (actor instanceof LogicGateActor) {
        if (((LogicGateActor) actor).getgType() == LogicGateActor.GateType.And) {
          // start and actor 
          SNode andGateActor = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x87370915ecfcc30L, "org.iets3.graphicalLustre.structure.AndActor"));
          SPropertyOperations.set(andGateActor, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());

          ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors"))).addElement(andGateActor);

          SNode gateDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, "org.iets3.graphicalLustre.structure.GateDefinition"));
          SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
          try {
            SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, 0x5f4fbd258ee84d22L, "definition"), LustreCodeGenerator.produceAndForMPS());

          } catch (Exception ex) {
            System.out.println("exception at .. actor and");
          }
          SLinkOperations.setTarget(andGateActor, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45cL, 0x87370915ed531d6L, "gateDefinition"), gateDefinition);

          SLinkOperations.getChildren(gateDescriptors, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d1eL, 0x5f4fbd258ee84d1fL, "gateDefinitions")).add(gateDefinition);

          // need to update hashmap 

        } else if (((LogicGateActor) actor).getgType() == LogicGateActor.GateType.TernaryNot) {
          SNode ternarynot = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0717L, "org.iets3.graphicalLustre.structure.TernaryNotActor"));
          SPropertyOperations.set(ternarynot, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());

          ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors"))).addElement(ternarynot);

          SNode gateDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, "org.iets3.graphicalLustre.structure.GateDefinition"));
          SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
          try {
            SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, 0x5f4fbd258ee84d22L, "definition"), LustreCodeGenerator.produceTernaryNotForMPS());

          } catch (Exception ex) {
            System.out.println("exception at .. actor ternary not");
          }
          SLinkOperations.setTarget(ternarynot, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45cL, 0x87370915ed531d6L, "gateDefinition"), gateDefinition);

          SLinkOperations.getChildren(gateDescriptors, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d1eL, 0x5f4fbd258ee84d1fL, "gateDefinitions")).add(gateDefinition);


        } else if (((LogicGateActor) actor).getgType() == LogicGateActor.GateType.Or) {

          SNode orGateActor = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x17ee0fce5b59ab5cL, "org.iets3.graphicalLustre.structure.OrActor"));
          SPropertyOperations.set(orGateActor, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());

          ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors"))).addElement(orGateActor);

          SNode gateDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, "org.iets3.graphicalLustre.structure.GateDefinition"));
          SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
          try {
            SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, 0x5f4fbd258ee84d22L, "definition"), LustreCodeGenerator.produceOrForMPS());

          } catch (Exception ex) {
            System.out.println("exception at .. actor or");
          }
          SLinkOperations.setTarget(orGateActor, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45cL, 0x87370915ed531d6L, "gateDefinition"), gateDefinition);

          SLinkOperations.getChildren(gateDescriptors, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d1eL, 0x5f4fbd258ee84d1fL, "gateDefinitions")).add(gateDefinition);



        } else {
          if (LOG.isInfoEnabled()) {
            LOG.info("not in the list ");
          }
        }

      } else if (actor instanceof HighLevelCtrlActor) {
        if (((HighLevelCtrlActor) actor).getcType() == HighLevelCtrlActor.CtrlType.IfTB) {
          SNode ifTBActor = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef496610L, "org.iets3.graphicalLustre.structure.IfTBActor"));
          SPropertyOperations.set(ifTBActor, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
          ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors"))).addElement(ifTBActor);

          // adding in model descriptor file 
          SNode gateDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, "org.iets3.graphicalLustre.structure.GateDefinition"));
          SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
          try {
            SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, 0x5f4fbd258ee84d22L, "definition"), LustreCodeGenerator.produceIfTBForMPS());

          } catch (Exception ex) {
            System.out.println("exception at .. event actor complex");
          }
          SLinkOperations.setTarget(ifTBActor, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45cL, 0x87370915ed531d6L, "gateDefinition"), gateDefinition);

          SLinkOperations.getChildren(gateDescriptors, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d1eL, 0x5f4fbd258ee84d1fL, "gateDefinitions")).add(gateDefinition);


        } else if (((HighLevelCtrlActor) actor).getcType() == HighLevelCtrlActor.CtrlType.TrUB) {
          SNode TrUBActor = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0766L, "org.iets3.graphicalLustre.structure.TrUBActor"));
          SPropertyOperations.set(TrUBActor, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
          ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors"))).addElement(TrUBActor);


          SNode gateDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, "org.iets3.graphicalLustre.structure.GateDefinition"));
          SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
          try {
            SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, 0x5f4fbd258ee84d22L, "definition"), LustreCodeGenerator.produceTrUBForMPS());

          } catch (Exception ex) {
            System.out.println("exception at .. event actor complex");
          }
          SLinkOperations.setTarget(TrUBActor, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45cL, 0x87370915ed531d6L, "gateDefinition"), gateDefinition);

          SLinkOperations.getChildren(gateDescriptors, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d1eL, 0x5f4fbd258ee84d1fL, "gateDefinitions")).add(gateDefinition);



        } else if (((HighLevelCtrlActor) actor).getcType() == HighLevelCtrlActor.CtrlType.Iff) {

          SNode iffActor = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x17ee0fce5b59ab5dL, "org.iets3.graphicalLustre.structure.IffActor"));
          SPropertyOperations.set(iffActor, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
          ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors"))).addElement(iffActor);

          SNode gateDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, "org.iets3.graphicalLustre.structure.GateDefinition"));
          SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
          try {
            SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, 0x5f4fbd258ee84d22L, "definition"), LustreCodeGenerator.produceIffForMPS());

          } catch (Exception ex) {
            System.out.println("exception at .. event actor complex");
          }
          SLinkOperations.setTarget(iffActor, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45cL, 0x87370915ed531d6L, "gateDefinition"), gateDefinition);

          SLinkOperations.getChildren(gateDescriptors, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d1eL, 0x5f4fbd258ee84d1fL, "gateDefinitions")).add(gateDefinition);

        } else {
          if (LOG.isInfoEnabled()) {
            LOG.info("The actor type is not defined yet");
          }
        }
      } else if (actor instanceof ResActor) {
        SNode resActor = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45dL, "org.iets3.graphicalLustre.structure.ResActor"));
        SPropertyOperations.set(resActor, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
        ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors"))).addElement(resActor);

        SNode gateDefinition = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, "org.iets3.graphicalLustre.structure.GateDefinition"));
        SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), actor.getName());
        try {
          SPropertyOperations.set(gateDefinition, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, 0x5f4fbd258ee84d22L, "definition"), LustreCodeGenerator.produceResForMPS(((ResActor) actor).getNumberOfInputPorts()));
          System.out.println("the value of size is " + ((ResActor) actor).getNumberOfInputPorts());

        } catch (Exception ex) {
          System.out.println("exception at .. event actor res");
        }
        SLinkOperations.setTarget(resActor, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45cL, 0x87370915ed531d6L, "gateDefinition"), gateDefinition);
        SLinkOperations.getChildren(gateDescriptors, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d1eL, 0x5f4fbd258ee84d1fL, "gateDefinitions")).add(gateDefinition);



      } else {
        if (LOG.isInfoEnabled()) {
          LOG.info("the actor type is not at all defined yet");
        }
      }

    }


    if (LOG.isInfoEnabled()) {
      LOG.info("the input ports are +" + controller.getGlobalInputPorts().size());
    }
    // setting the global input and putput ports as actors 
    for (String inputPortName : controller.getGlobalInputPorts()) {
      SNode GlobalInput = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5e94280dffc5689cL, "org.iets3.graphicalLustre.structure.GlobalInputActor"));
      SPropertyOperations.set(GlobalInput, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), inputPortName);
      ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors"))).addElement(GlobalInput);

    }

    for (String globalOutput : controller.getGlobalOutputPorts()) {

      SNode GlobalOutput = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5e94280dffc5689dL, "org.iets3.graphicalLustre.structure.GlobalOutputActor"));
      SPropertyOperations.set(GlobalOutput, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), globalOutput);
      ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors"))).addElement(GlobalOutput);
    }

    // instantiating wires 
    for (Wire wire : controller.getWires()) {
      SNode wireNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, "org.iets3.graphicalLustre.structure.Wire"));

      for (SNode actor : ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors")))) {
        if (SNodeOperations.isInstanceOf(actor, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5e94280dffc0f136L, "org.iets3.graphicalLustre.structure.GlobalActor"))) {
          if (wire.getSourcePort().contains(SPropertyOperations.getString(actor, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
            if (isEmptyString(SPropertyOperations.getString(wireNode, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x13859febca01872bL, "sourcePort")))) {
              SPropertyOperations.set(wireNode, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x13859febca01872bL, "sourcePort"), wire.getSourcePort());
              SLinkOperations.setTarget(wireNode, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec5bL, "sourceActor"), actor);

            }
          }

          if (wire.getDestPort().contains(SPropertyOperations.getString(actor, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
            if (isEmptyString(SPropertyOperations.getString(wireNode, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x13859febca01872eL, "destinationPort")))) {
              SPropertyOperations.set(wireNode, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x13859febca01872eL, "destinationPort"), wire.getDestPort());
              SLinkOperations.setTarget(wireNode, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec64L, "destinationActor"), actor);

            }

          }

        } else {
          if (wire.getSourcePort().contains(SPropertyOperations.getString(actor, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + ".")) {
            if (isEmptyString(SPropertyOperations.getString(wireNode, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x13859febca01872bL, "sourcePort")))) {
              SPropertyOperations.set(wireNode, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x13859febca01872bL, "sourcePort"), wire.getSourcePort());
              SLinkOperations.setTarget(wireNode, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec5bL, "sourceActor"), actor);

            }
          }

          if (wire.getDestPort().contains(SPropertyOperations.getString(actor, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + ".")) {
            if (isEmptyString(SPropertyOperations.getString(wireNode, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x13859febca01872eL, "destinationPort")))) {
              SPropertyOperations.set(wireNode, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x13859febca01872eL, "destinationPort"), wire.getDestPort());
              SLinkOperations.setTarget(wireNode, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec64L, "destinationActor"), actor);

            }

          }

        }
      }

      ListSequence.fromList(SLinkOperations.getChildren(modelHolder, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d538b7bL, "listofWires"))).addElement(wireNode);
    }



    // now adding model holder to the model 
    SModelOperations.addRootNode(SNodeOperations.getModel(__thisNode__), modelHolder);
    SModelOperations.addRootNode(SNodeOperations.getModel(__thisNode__), gateDescriptors);

  }
  /*package*/ static void ConvertReqToFormulae_id4MKUcPlT3vX(@NotNull SNode __thisNode__, String fileName) {

    try {
      String inputFilePath = fileName;


      File inputFile = new File(inputFilePath);
      if (inputFile.exists()) {
        inputFile.delete();
      }
      FileWriter fileWriter = new FileWriter(inputFile.getAbsoluteFile());
      BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
      if (LOG.isInfoEnabled()) {
        LOG.info("" + System.getProperty("user.dir"));
      }

      Map<SNode, String> triggerMap = MapSequence.fromMap(new LinkedHashMap<SNode, String>(16, (float) 0.75, false));
      Map<SNode, String> systemResponseMap = MapSequence.fromMap(new HashMap<SNode, String>());
      for (SNode trigger : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, 0x29245ddc2083503cL, "glossary")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ff4L, "listOfTriggers")))) {
        MapSequence.fromMap(triggerMap).put(trigger, SPropertyOperations.getString(trigger, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "text")).replace(" ", ""));
      }

      for (SNode systemResponse : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, 0x29245ddc2083503cL, "glossary")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ffbL, "listOfResponses")))) {
        MapSequence.fromMap(systemResponseMap).put(systemResponse, (SPropertyOperations.getString(SLinkOperations.getTarget(systemResponse, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "systemName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + SPropertyOperations.getString(systemResponse, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711686L, "action"))).replace(" ", ""));
      }

      int count = 0;
      for (SNode req : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, 0x5d97a5a8692b865cL, "requirements")))) {
        bufferedWriter.write("##  ");

        if (SNodeOperations.isInstanceOf(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6d72a819db7d92a9L, "org.iets3.ears.gxw.structure.NormalUbiquitousReq"))) {

          System.out.println(" the count is " + count++ + "for NUR");
          bufferedWriter.write("The " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6d72a819db7d92a9L, "org.iets3.ears.gxw.structure.NormalUbiquitousReq")), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d3L, 0x6979ba361f3c9b03L, "systemName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " shall " + PropositionalFormulaSR__BehaviorDescriptor.toTextString_id6_TIzovgSIh.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6d72a819db7d92a9L, "org.iets3.ears.gxw.structure.NormalUbiquitousReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6d72a819db7d92a9L, 0x6979ba361f3afff3L, "systemResponse"))) + "\n");
          SNode responseFormula = SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6d72a819db7d92a9L, "org.iets3.ears.gxw.structure.NormalUbiquitousReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6d72a819db7d92a9L, 0x6979ba361f3afff3L, "systemResponse"));


          bufferedWriter.write("[] !" + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(responseFormula, systemResponseMap));

          bufferedWriter.write("\n\n");
        } else if (SNodeOperations.isInstanceOf(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f44f4aeL, "org.iets3.ears.gxw.structure.NormalEventDrivenOptionalFeatReq"))) {

          System.out.println(" the count is " + count++ + "for NEDOFR");

          SNode the_req = SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f44f4aeL, "org.iets3.ears.gxw.structure.NormalEventDrivenOptionalFeatReq"));
          SNode responseFormula = SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f44f4aeL, "org.iets3.ears.gxw.structure.NormalEventDrivenOptionalFeatReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x6979ba361f3b0015L, "systemResponse"));
          SNode triggerFormula = SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f44f4aeL, "org.iets3.ears.gxw.structure.NormalEventDrivenOptionalFeatReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f44f4aeL, 0x333c641fcaaa86e3L, "untilTrigger"));


          if (SNodeOperations.getConcept(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, 0x7f8bb363a2782aa8L, "triggerModifier"))) == MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7f8bb363a2871dd7L, "org.iets3.ears.gxw.structure.Occurs")) {

            bufferedWriter.write("When " + PropositionalFormulaTr__BehaviorDescriptor.toTextString_id3cWp1ZaFwKU.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f44f4aeL, "org.iets3.ears.gxw.structure.NormalEventDrivenOptionalFeatReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x7f8bb363a25a61abL, "trigger"))) + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, "org.iets3.ears.gxw.structure.NormalEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, 0x7f8bb363a2782aa8L, "triggerModifier")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x10d34fa226eL, "alias")) + " , the " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f44f4aeL, "org.iets3.ears.gxw.structure.NormalEventDrivenOptionalFeatReq")), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d3L, 0x6979ba361f3c9b03L, "systemName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " shall " + PropositionalFormulaSR__BehaviorDescriptor.toTextString_id6_TIzovgSIh.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f44f4aeL, "org.iets3.ears.gxw.structure.NormalEventDrivenOptionalFeatReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x6979ba361f3b0015L, "systemResponse"))) + "  until " + PropositionalFormulaTr__BehaviorDescriptor.toTextString_id3cWp1ZaFwKU.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f44f4aeL, "org.iets3.ears.gxw.structure.NormalEventDrivenOptionalFeatReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f44f4aeL, 0x333c641fcaaa86e3L, "untilTrigger"))) + " \n");
            bufferedWriter.write("[] " + "(" + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x7f8bb363a25a61abL, "trigger")), triggerMap) + " -> " + "(" + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(responseFormula, systemResponseMap) + " W " + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(triggerFormula, triggerMap) + "))");
          } else if (SNodeOperations.getConcept(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, 0x7f8bb363a2782aa8L, "triggerModifier"))) == MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7f8bb363a2782aa2L, "org.iets3.ears.gxw.structure.Happens")) {

            bufferedWriter.write("\n");

            String triggerName = PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x7f8bb363a25a61abL, "trigger")), triggerMap);

            bufferedWriter.write("[] " + "(( !" + triggerName + " && X " + triggerName + ")" + " -> " + "X(" + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(responseFormula, systemResponseMap) + " W " + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(triggerFormula, triggerMap) + "))");

          } else if (SNodeOperations.getConcept(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, 0x7f8bb363a2782aa8L, "triggerModifier"))) == MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7f8bb363a2782aa5L, "org.iets3.ears.gxw.structure.HappensStable")) {
            String triggerName = PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x7f8bb363a25a61abL, "trigger")), triggerMap);

            bufferedWriter.write("[] " + "(" + triggerName + " && !" + triggerName + " && XX(" + triggerName + "))" + " -> " + "XX(" + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(responseFormula, systemResponseMap) + " W " + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(triggerFormula, triggerMap) + ")");
          }

          bufferedWriter.write("\n\n");
        } else if (SNodeOperations.isInstanceOf(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, "org.iets3.ears.gxw.structure.NormalEventDrivenReq"))) {

          bufferedWriter.write("When " + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, "org.iets3.ears.gxw.structure.NormalEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x7f8bb363a25a61abL, "trigger")), triggerMap) + ", the " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, "org.iets3.ears.gxw.structure.NormalEventDrivenReq")), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d3L, 0x6979ba361f3c9b03L, "systemName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " shall " + PropositionalFormulaSR__BehaviorDescriptor.toTextString_id6_TIzovgSIh.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, "org.iets3.ears.gxw.structure.NormalEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x6979ba361f3b0015L, "systemResponse"))) + "\n");

          SNode the_req = SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, "org.iets3.ears.gxw.structure.NormalEventDrivenReq"));
          SNode responseFormula = SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x6979ba361f3b0015L, "systemResponse"));
          if (SNodeOperations.getConcept(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, 0x7f8bb363a2782aa8L, "triggerModifier"))) == MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7f8bb363a2871dd7L, "org.iets3.ears.gxw.structure.Occurs")) {

            bufferedWriter.write("[] " + "(" + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x7f8bb363a25a61abL, "trigger")), triggerMap) + " -> " + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(responseFormula, systemResponseMap) + ")");
          } else if (SNodeOperations.getConcept(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, 0x7f8bb363a2782aa8L, "triggerModifier"))) == MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7f8bb363a2782aa2L, "org.iets3.ears.gxw.structure.Happens")) {
            String triggerName = PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x7f8bb363a25a61abL, "trigger")), triggerMap);

            bufferedWriter.write("[] " + "((" + triggerName + " && !" + triggerName + ")" + " -> X (" + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(responseFormula, systemResponseMap) + "))");
          } else if (SNodeOperations.getConcept(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d6L, 0x7f8bb363a2782aa8L, "triggerModifier"))) == MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7f8bb363a2782aa5L, "org.iets3.ears.gxw.structure.HappensStable")) {
            String triggerName = PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(the_req, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x415265a05dfb4103L, 0x7f8bb363a25a61abL, "trigger")), triggerMap);

            bufferedWriter.write("[] " + "(" + triggerName + " && !" + triggerName + " && XX(" + triggerName + "))" + " -> XX(" + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(responseFormula, systemResponseMap) + "))");
          }
          bufferedWriter.write("\n\n");
        } else if (SNodeOperations.isInstanceOf(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, "org.iets3.ears.gxw.structure.NormalRisingEdgeReq"))) {

          bufferedWriter.write("When IFF " + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, "org.iets3.ears.gxw.structure.NormalRisingEdgeReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, 0x168a7cb10e4dea9fL, "trigger")), triggerMap) + ", the " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, "org.iets3.ears.gxw.structure.NormalRisingEdgeReq")), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d3L, 0x6979ba361f3c9b03L, "systemName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " shall " + PropositionalFormulaSR__BehaviorDescriptor.toTextString_id6_TIzovgSIh.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, "org.iets3.ears.gxw.structure.NormalRisingEdgeReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, 0x168a7cb10e4dea9eL, "systemResponse"))) + "\n");

          SNode responseFormula = SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, "org.iets3.ears.gxw.structure.NormalRisingEdgeReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, 0x168a7cb10e4dea9eL, "systemResponse"));
          bufferedWriter.write("[] " + "(( !" + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, "org.iets3.ears.gxw.structure.NormalRisingEdgeReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, 0x168a7cb10e4dea9fL, "trigger")), triggerMap) + " && X " + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, "org.iets3.ears.gxw.structure.NormalRisingEdgeReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x168a7cb10e4dea9bL, 0x168a7cb10e4dea9fL, "trigger")), triggerMap) + " )" + " <-> " + " X (" + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(responseFormula, systemResponseMap) + "))");
          bufferedWriter.write("\n\n");
        } else if (SNodeOperations.isInstanceOf(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, "org.iets3.ears.gxw.structure.ComplexEventDrivenReq"))) {


          bufferedWriter.write("While " + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, "org.iets3.ears.gxw.structure.ComplexEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, 0x12815fbacd831a7aL, "triggerWhile")), triggerMap) + " when " + SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, "org.iets3.ears.gxw.structure.ComplexEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, 0x12815fbacd831a7fL, "triggerWhen")) + ", the " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, "org.iets3.ears.gxw.structure.ComplexEventDrivenReq")), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d3L, 0x6979ba361f3c9b03L, "systemName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " shall " + PropositionalFormulaSR__BehaviorDescriptor.toTextString_id6_TIzovgSIh.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, "org.iets3.ears.gxw.structure.ComplexEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, 0x12815fbacd831a85L, "systemResponse"))) + "\n");

          SNode responseFormula = SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, "org.iets3.ears.gxw.structure.ComplexEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, 0x12815fbacd831a85L, "systemResponse"));
          bufferedWriter.write("[] " + "(( " + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, "org.iets3.ears.gxw.structure.ComplexEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, 0x12815fbacd831a7aL, "triggerWhile")), triggerMap) + " &&  " + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, "org.iets3.ears.gxw.structure.ComplexEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, 0x12815fbacd831a7fL, "triggerWhen")), triggerMap) + " )" + " ->" + "(" + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(responseFormula, systemResponseMap) + " W " + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, "org.iets3.ears.gxw.structure.ComplexEventDrivenReq")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x12815fbacd8318dfL, 0x12815fbacd831a7aL, "triggerWhile")), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x333c641fcaa983a1L, "org.iets3.ears.gxw.structure.NotFormulaTr")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x333c641fcaa983a8L, 0x333c641fcaa983afL, "arg")), triggerMap) + "))");
          bufferedWriter.write("\n\n");
        } else if (SNodeOperations.isInstanceOf(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, "org.iets3.ears.gxw.structure.ComplexEventDrivenUntil"))) {

          bufferedWriter.write("While " + PropositionalFormulaTr__BehaviorDescriptor.toTextString_id3cWp1ZaFwKU.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, "org.iets3.ears.gxw.structure.ComplexEventDrivenUntil")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, 0x769597d03a1562abL, "triggerWhile"))) + " when " + PropositionalFormulaTr__BehaviorDescriptor.toTextString_id3cWp1ZaFwKU.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, "org.iets3.ears.gxw.structure.ComplexEventDrivenUntil")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, 0x769597d03a1562acL, "triggerWhen"))) + ", the " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, "org.iets3.ears.gxw.structure.ComplexEventDrivenUntil")), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d3L, 0x6979ba361f3c9b03L, "systemName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " shall " + PropositionalFormulaSR__BehaviorDescriptor.toTextString_id6_TIzovgSIh.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, "org.iets3.ears.gxw.structure.ComplexEventDrivenUntil")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, 0x769597d03a1562adL, "systemResponse"))) + " until " + PropositionalFormulaTr__BehaviorDescriptor.toTextString_id3cWp1ZaFwKU.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, "org.iets3.ears.gxw.structure.ComplexEventDrivenUntil")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, 0x769597d03a1562b1L, "untilTrigger"))) + "\n");

          SNode responseFormula = SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, "org.iets3.ears.gxw.structure.ComplexEventDrivenUntil")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, 0x769597d03a1562adL, "systemResponse"));
          String finalString = "";
          String modifierTrigger = PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, "org.iets3.ears.gxw.structure.ComplexEventDrivenUntil")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, 0x769597d03a1562abL, "triggerWhile")), triggerMap);

          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, "org.iets3.ears.gxw.structure.ComplexEventDrivenUntil")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, 0x769597d03a1562abL, "triggerWhile")), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x333c641fcaa9839eL, "org.iets3.ears.gxw.structure.AndFormulaTr"))) {

            modifierTrigger = modifierTrigger.replace("(", "");
            modifierTrigger = modifierTrigger.replace(")", "");
            modifierTrigger = modifierTrigger.replace("&", "|");

            finalString = modifierTrigger;


          } else {
            int countMatches = StringUtils.countMatches(modifierTrigger, "!");
            if (countMatches / 2 != 0) {

              finalString = modifierTrigger.substring(countMatches - 1);
            } else {

              finalString = modifierTrigger.substring(countMatches);
            }

            if (countMatches == 0) {
              finalString = "!" + finalString;
            }
          }

          bufferedWriter.write("[]( " + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, "org.iets3.ears.gxw.structure.ComplexEventDrivenUntil")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, 0x769597d03a1562acL, "triggerWhen")), triggerMap) + " -> ( " + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(responseFormula, systemResponseMap) + " W (" + PropositionalFormulaTr__BehaviorDescriptor.toFormulaString_id3cWp1ZaFwJv.invoke(SLinkOperations.getTarget(SNodeOperations.cast(req, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, "org.iets3.ears.gxw.structure.ComplexEventDrivenUntil")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x769597d03a1542e4L, 0x769597d03a1562b1L, "untilTrigger")), triggerMap) + " || " + finalString + " )))");
          bufferedWriter.write("\n\n");
        }

      }

      List<SNode> listOfAxioms = SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, 0x29245ddc2083503cL, "glossary")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x16773e7879d1a85aL, "listOfAxioms"));

      for (SNode axiom : ListSequence.fromList(listOfAxioms)) {

        bufferedWriter.write("[] (" + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(SLinkOperations.getTarget(axiom, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x16773e7879d18484L, 0x16773e7879d3bd57L, "arg1")), systemResponseMap) + " <-> " + PropositionalFormulaSR__BehaviorDescriptor.toFormulaString_id6_TIzovfT5$.invoke(SLinkOperations.getTarget(axiom, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x16773e7879d18484L, 0x16773e7879d3bd5cL, "arg2")), systemResponseMap) + " )");
        bufferedWriter.write("\n\n");

      }


      bufferedWriter.write("INPUT ");
      for (IMapping<SNode, String> trigger : MapSequence.fromMap(triggerMap)) {
        bufferedWriter.write(trigger.value());
        if (MapSequence.fromMap(triggerMap).last().value() != trigger.value()) {
          bufferedWriter.write(", ");
        }
      }

      bufferedWriter.write("\n");

      bufferedWriter.write("OUTPUT ");
      for (IMapping<SNode, String> response : MapSequence.fromMap(systemResponseMap)) {
        bufferedWriter.write(response.value());
        if (MapSequence.fromMap(systemResponseMap).last().value() != response.value()) {
          bufferedWriter.write(", ");
        }
      }
      bufferedWriter.write("\n");



      bufferedWriter.close();
    } catch (Exception ex) {
      System.out.println("The exception is " + ex);
    }
  }
  /*package*/ static String GetSolverOutputString_id4MKUcPmjdeS(@NotNull SNode __thisNode__, File file) {

    ArrayList<String> variableList = new ArrayList<String>();


    try {

      GXWEngine engine = new GXWEngine(false);

      GXWspec problem = new GXWspec(file);

      ConstraintBuilder builder = new ConstraintBuilder(problem);

      PrintWriter writer;
      writer = new PrintWriter("tmp.qdimacs", "UTF-8");

      if (LOG.isInfoEnabled()) {
        LOG.info("before");
      }

      builder.produceConstraint();

      writer.write(builder.qbfCstr.constraint.toString());
      writer.close();

      variableList = builder.qbfCstr.cnfVarList;
      engine.resolutionBlockPin = builder.resolutionBlockPin;

      if (LOG.isInfoEnabled()) {
        LOG.info("Use native Java 2QBF solver");
      }

      // defining variables 

      ByteArrayOutputStream baOutputStream = new ByteArrayOutputStream();
      PrintStream printStream = new PrintStream(baOutputStream);
      PrintStream old = System.out;
      System.setOut(printStream);

      TwoQBF solver = new TwoQBF();
      String[] argsnew = new String[1];
      argsnew[0] = "tmp.qdimacs";
      solver.run(argsnew);

      System.out.flush();
      System.setOut(old);

      UnknownVariableAssignment unknownVA = new UnknownVariableAssignment();

      String result = baOutputStream.toString();
      if (LOG.isInfoEnabled()) {
        LOG.info("the result string has " + result);
      }
      if (result.contains("UNSAT")) {

        if (problem.realizable == GXWspec.NO_SOLUTION_2QBF) {
          if (LOG.isInfoEnabled()) {
            LOG.info("Inconsistent result between synthesis and spec (the spec should be not realizable): " + file.getName());
          }
          JOptionPane.showMessageDialog(null, "Inconsistent result between synthesis and spec (the spec should be not realizable): " + file.getName());

          return "Error: No solution for the given spec!( No solution 2QBF) " + file.getName();

        }

        if (LOG.isInfoEnabled()) {
          LOG.info("Parameter assignment for resolution blocks found! ");
        }
        String[] res = result.split("[\\r\\n]+");
        for (String r : res) {
          if (r.trim().startsWith("UNSAT for the following universal variable assignment:")) {
            String assignments = r.trim().substring("UNSAT for the following universal variable assignment:".length()).trim();
            if (LOG.isInfoEnabled()) {
              LOG.info(" assignments!" + assignments);
            }
            if (!(assignments.trim().equals(""))) {
              String[] assigns = assignments.split(",");
              for (String assign : assigns) {
                boolean isSetToFalse = false;
                if (assign.trim().startsWith("-")) {
                  isSetToFalse = true;
                  assign = assign.trim().substring(1);
                }

                String varName = variableList.get(Integer.parseInt(assign)).substring("Res".length(), variableList.get(Integer.parseInt(assign)).indexOf("."));

                if (isSetToFalse) {
                  unknownVA.variableAssignment.put(varName, "false");
                } else {
                  unknownVA.variableAssignment.put(varName, "true");
                }
              }
            }
            break;
          }
        }




      } else {
        if (problem.realizable == GXWspec.REALIZABLE) {
          if (LOG.isInfoEnabled()) {
            LOG.info(" The spec should be realizable): " + file.getName());
          }
          JOptionPane.showMessageDialog(null, " ERROR: Inconsistent result between synthesis and spec (the spec should be realizable): " + file.getName());

          return "Success! the spec is realizable" + file.getName();


        }

        if (LOG.isInfoEnabled()) {
          LOG.info("Parameter assignment for resolution blocks unavailable ");
        }
        JOptionPane.showMessageDialog(null, "Error: Parameter assignment for resolution blocks unavailable (the spec is not realizable)");

        return "Error: Spec not realizable ";
      }
    } catch (Exception ex) {
      if (LOG.isInfoEnabled()) {
        LOG.info("the exception is ..", ex);
      }

      return "Error: Incomplete requirements ";
    }

    return " ";

  }

  /*package*/ RequirementChunk__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        writeToFile_id3ghj88fUYVW(node, (String) parameters[0], (String) parameters[1]);
        return null;
      case 1:
        return (T) ((String) systhesizeSolverOutput_id3ghj88fVJYt(node, (File) parameters[0]));
      case 2:
        generateModelForMPS_id1TTP9gdhydO(node, (SDFctrl) parameters[0]);
        return null;
      case 3:
        ConvertReqToFormulae_id4MKUcPlT3vX(node, (String) parameters[0]);
        return null;
      case 4:
        return (T) ((String) GetSolverOutputString_id4MKUcPmjdeS(node, (File) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
